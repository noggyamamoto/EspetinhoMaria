/**
 * ============================================================================
 * PRODUTO CONTROLLER - GEST√ÉO COMPLETA DE PRODUTOS
 * ============================================================================
 * 
 * Controller respons√°vel por todas as opera√ß√µes CRUD relacionadas aos produtos.
 * Gerencia produtos e estoque de forma integrada, mantendo consist√™ncia dos dados.
 * 
 * Funcionalidades:
 * - Listagem de produtos com detalhes da categoria
 * - Cria√ß√£o de produto com registro autom√°tico no estoque
 * - Atualiza√ß√£o de produto e estoque simultaneamente
 * - Remo√ß√£o de produto com limpeza do estoque
 * - Busca individual de produto por ID
 * - Valida√ß√µes de neg√≥cio espec√≠ficas
 * 
 * Integra√ß√µes:
 * - Model Produto: Opera√ß√µes na tabela produtos
 * - Model Estoque: Opera√ß√µes na tabela estoque (via Produto)
 * - Categorias: Valida√ß√£o de categorias v√°lidas
 * 
 * @author Equipe Espetinho Maria
 * @version 2.0.0
 * @since 2025-07-24
 */

const BaseController = require('./BaseController');
const Produto = require('../models/Produto');

/**
 * Classe ProdutoController - Gest√£o de Produtos
 * 
 * Estende BaseController para herdar funcionalidades comuns como
 * valida√ß√µes, tratamento de erros e respostas padronizadas.
 */
class ProdutoController extends BaseController {
  
  /**
   * Construtor do ProdutoController
   * 
   * Inicializa a inst√¢ncia do model Produto que ser√° usado
   * em todas as opera√ß√µes deste controller.
   */
  constructor() {
    super(); // Chama o construtor da classe pai (BaseController)
    this.produtoModel = new Produto();
  }

  // ========================================================================
  // OPERA√á√ÉO: LISTAR TODOS OS PRODUTOS
  // ========================================================================

  /**
   * Lista todos os produtos com detalhes da categoria
   * 
   * @param {Object} req - Request do Express
   * @param {Object} res - Response do Express
   * 
   * Endpoint: GET /api/produtos
   * 
   * Funcionalidades:
   * - Busca produtos com JOIN nas categorias
   * - Formata dados para exibi√ß√£o consistente
   * - Converte disponibilidade (boolean ‚Üí Sim/N√£o)
   * - Inclui informa√ß√µes completas do produto
   * 
   * Resposta de sucesso:
   * [
   *   {
   *     "id_produto": 1,
   *     "nome": "Espeto de Alcatra",
   *     "descricao": "Alcatra no espeto",
   *     "preco_unitario": 12.50,
   *     "categoria": "ESPETOS",
   *     "disponivel": "Sim",
   *     "id_categoria": 1,
   *     "data_cadastro": "2025-01-20T10:30:00Z"
   *   }
   * ]
   */
  async index(req, res) {
    try {
      // Busca todos os produtos com detalhes das categorias
      const produtos = await this.produtoModel.findAllWithDetails();
      
      // Formata os dados para apresenta√ß√£o padronizada
      const produtosFormatados = produtos.map(row => ({
        id_produto: row.id_produto,
        nome: row.nome,
        descricao: row.descricao,
        preco_unitario: row.preco_unitario,
        categoria: row.categoria, // Nome da categoria (ESPETOS, BEBIDAS, etc.)
        disponivel: row.disponivel ? 'Sim' : 'N√£o', // Convers√£o boolean ‚Üí string
        id_categoria: row.id_categoria,
        data_cadastro: row.data_cadastro
      }));
      
      // Log para acompanhamento
      console.log(`‚úÖ ${produtosFormatados.length} produtos encontrados`);
      
      // Retorna lista formatada
      res.json(produtosFormatados);
      
    } catch (error) {
      // Trata erros usando m√©todo herdado do BaseController
      this.handleError(res, error, 'Erro ao buscar produtos');
    }
  }

  // ========================================================================
  // OPERA√á√ÉO: CRIAR NOVO PRODUTO
  // ========================================================================

  /**
   * Cria um novo produto com registro autom√°tico no estoque
   * 
   * @param {Object} req - Request do Express
   * @param {Object} res - Response do Express
   * 
   * Endpoint: POST /api/produtos
   * 
   * Body esperado:
   * {
   *   "nome": "Nome do produto",
   *   "descricao": "Descri√ß√£o opcional",
   *   "preco_unitario": 15.50,
   *   "id_categoria": 1,
   *   "disponivel": true
   * }
   * 
   * Processo de cria√ß√£o:
   * 1. Valida√ß√£o de campos obrigat√≥rios
   * 2. Valida√ß√£o de regras de neg√≥cio
   * 3. Prepara√ß√£o dos dados para produto e estoque
   * 4. Transa√ß√£o: cria√ß√£o em ambas as tabelas
   * 5. Resposta com dados do produto criado
   * 
   * Valida√ß√µes aplicadas:
   * - Nome: obrigat√≥rio, m√≠nimo 2 caracteres
   * - Pre√ßo: obrigat√≥rio, maior que zero
   * - Categoria: obrigat√≥ria, deve ser 1, 2 ou 3
   * - Dispon√≠vel: opcional, padr√£o false
   */
  async store(req, res) {
    try {
      // Extrai dados do corpo da requisi√ß√£o
      const { nome, descricao, preco_unitario, id_categoria, disponivel } = req.body;
      
      // Log para debugging
      console.log('üì¶ Criando novo produto:', { nome, descricao, preco_unitario, id_categoria, disponivel });
      
      // ===== VALIDA√á√ïES =====
      
      // Valida√ß√£o de campos obrigat√≥rios
      const errors = this.validateRequired(req.body, ['nome', 'preco_unitario', 'id_categoria']);
      
      // Valida√ß√£o espec√≠fica: nome m√≠nimo
      if (nome && nome.trim().length < 2) {
        errors.push('Nome deve ter pelo menos 2 caracteres');
      }
      
      // Valida√ß√£o espec√≠fica: pre√ßo positivo
      if (preco_unitario && preco_unitario <= 0) {
        errors.push('Pre√ßo deve ser um valor v√°lido maior que zero');
      }
      
      // Valida√ß√£o espec√≠fica: categoria v√°lida
      if (id_categoria && ![1, 2, 3].includes(parseInt(id_categoria))) {
        errors.push('Categoria inv√°lida. Use: 1=ESPETOS, 2=BEBIDAS, 3=INSUMOS');
      }
      
      // Se h√° erros de valida√ß√£o, retorna erro 400
      if (errors.length > 0) {
        return this.validationError(res, errors);
      }
      
      // ===== PREPARA√á√ÉO DOS DADOS =====
      
      const data_cadastro = new Date().toISOString();
      const disponivelInt = disponivel ? 1 : 0; // Convers√£o boolean ‚Üí integer
      
      // Dados para tabela produtos
      const produtoData = {
        nome: nome.trim(),
        descricao: descricao ? descricao.trim() : '',
        preco_unitario: parseFloat(preco_unitario)
      };
      
      // Dados para tabela estoque (relacionada)
      const estoqueData = {
        descricao: nome.trim(), // Usa o mesmo nome do produto
        id_categoria: parseInt(id_categoria),
        data_cadastro,
        disponivel: disponivelInt
      };
      
      // ===== OPERA√á√ÉO DE CRIA√á√ÉO =====
      
      // Cria produto e estoque em transa√ß√£o at√¥mica
      const result = await this.produtoModel.createWithEstoque(produtoData, estoqueData);
      
      // Log de sucesso
      console.log('‚úÖ Produto criado com ID:', result.id_produto);
      
      // Resposta de sucesso com dados do produto criado
      this.successResponse(res, {
        id_produto: result.id_produto,
        nome: produtoData.nome,
        descricao: produtoData.descricao,
        preco_unitario: produtoData.preco_unitario,
        id_estoque: result.id_estoque,
        id_categoria: parseInt(id_categoria),
        disponivel: disponivelInt
      }, 'Produto criado com sucesso!', 201); // HTTP 201 Created
      
    } catch (error) {
      // Trata erros de cria√ß√£o
      this.handleError(res, error, 'Erro ao criar produto');
    }
  }

  // ========================================================================
  // OPERA√á√ÉO: ATUALIZAR PRODUTO EXISTENTE
  // ========================================================================

  /**
   * Atualiza um produto existente e seu registro no estoque
   * 
   * @param {Object} req - Request do Express
   * @param {Object} res - Response do Express
   * 
   * Endpoint: PUT /api/produtos/:id
   * 
   * Par√¢metros:
   * - id: ID do produto a ser atualizado (na URL)
   * 
   * Body esperado:
   * {
   *   "preco_unitario": 18.00,
   *   "descricao": "Nova descri√ß√£o",
   *   "id_categoria": 2,
   *   "disponivel": false
   * }
   * 
   * Observa√ß√µes:
   * - Nome n√£o √© alter√°vel (regra de neg√≥cio)
   * - Atualiza√ß√£o simult√¢nea em produtos e estoque
   * - Valida√ß√£o de produto existente
   */
  async update(req, res) {
    try {
      // Extrai ID da URL e dados do body
      const { id } = req.params;
      const { preco_unitario, descricao, id_categoria, disponivel } = req.body;
      
      // Log da opera√ß√£o
      console.log('üìù Editando produto ID:', id, { preco_unitario, descricao, id_categoria, disponivel });
      
      // ===== VALIDA√á√ïES =====
      
      // Campos obrigat√≥rios para atualiza√ß√£o
      const errors = this.validateRequired(req.body, ['preco_unitario', 'descricao', 'id_categoria']);
      
      // Valida√ß√£o: pre√ßo positivo
      if (preco_unitario && preco_unitario <= 0) {
        errors.push('Pre√ßo deve ser um valor v√°lido maior que zero');
      }
      
      // Valida√ß√£o: descri√ß√£o m√≠nima
      if (descricao && descricao.trim().length < 3) {
        errors.push('Descri√ß√£o deve ter pelo menos 3 caracteres');
      }
      
      // Valida√ß√£o: categoria v√°lida
      if (id_categoria && ![1, 2, 3].includes(parseInt(id_categoria))) {
        errors.push('Categoria inv√°lida. Use: 1=ESPETOS, 2=BEBIDAS, 3=INSUMOS');
      }
      
      // Retorna erros de valida√ß√£o se existirem
      if (errors.length > 0) {
        return this.validationError(res, errors);
      }
      
      // ===== PREPARA√á√ÉO DOS DADOS =====
      
      // Dados para atualizar na tabela produtos
      const produtoData = {
        preco_unitario: parseFloat(preco_unitario)
      };
      
      // Dados para atualizar na tabela estoque
      const estoqueData = {
        descricao: descricao.trim(),
        id_categoria: parseInt(id_categoria),
        disponivel: disponivel ? 1 : 0
      };
      
      // ===== OPERA√á√ÉO DE ATUALIZA√á√ÉO =====
      
      // Atualiza produto e estoque relacionado
      const result = await this.produtoModel.updateWithEstoque(id, produtoData, estoqueData);
      
      // Verifica se o produto foi encontrado e atualizado
      if (result.changes === 0) {
        return this.notFoundError(res, 'Produto n√£o encontrado');
      }
      
      // Log e resposta de sucesso
      console.log('‚úÖ Produto editado com sucesso');
      this.successResponse(res, null, 'Produto editado com sucesso!');
      
    } catch (error) {
      // Trata erros de atualiza√ß√£o
      this.handleError(res, error, 'Erro ao editar produto');
    }
  }

  // ========================================================================
  // OPERA√á√ÉO: REMOVER PRODUTO
  // ========================================================================

  /**
   * Remove um produto e sua entrada no estoque
   * 
   * @param {Object} req - Request do Express
   * @param {Object} res - Response do Express
   * 
   * Endpoint: DELETE /api/produtos/:id
   * 
   * Par√¢metros:
   * - id: ID do produto a ser removido (na URL)
   * 
   * Processo de remo√ß√£o:
   * 1. Valida√ß√£o de exist√™ncia do produto
   * 2. Remo√ß√£o em cascata (produto + estoque)
   * 3. Verifica√ß√£o de integridade referencial
   * 4. Confirma√ß√£o da opera√ß√£o
   * 
   * Regras de neg√≥cio:
   * - Remove produto da tabela produtos
   * - Remove entrada relacionada da tabela estoque
   * - Opera√ß√£o at√¥mica (transa√ß√£o)
   */
  async destroy(req, res) {
    try {
      // Extrai ID da URL
      const { id } = req.params;
      
      // Log da opera√ß√£o
      console.log('üóëÔ∏è Removendo produto ID:', id);
      
      // ===== OPERA√á√ÉO DE REMO√á√ÉO =====
      
      // Remove produto e estoque relacionado em transa√ß√£o
      const result = await this.produtoModel.deleteWithEstoque(id);
      
      // Verifica se o produto foi encontrado e removido
      if (result.changes === 0) {
        return this.notFoundError(res, 'Produto n√£o encontrado');
      }
      
      // Log e resposta de sucesso
      console.log('‚úÖ Produto removido com sucesso');
      this.successResponse(res, null, 'Produto removido com sucesso!');
      
    } catch (error) {
      // Trata erros de remo√ß√£o (ex: viola√ß√µes de integridade referencial)
      this.handleError(res, error, 'Erro ao remover produto');
    }
  }

  // ========================================================================
  // OPERA√á√ÉO: BUSCAR PRODUTO POR ID
  // ========================================================================

  /**
   * Busca um produto espec√≠fico por seu ID
   * 
   * @param {Object} req - Request do Express
   * @param {Object} res - Response do Express
   * 
   * Endpoint: GET /api/produtos/:id
   * 
   * Par√¢metros:
   * - id: ID do produto a ser buscado (na URL)
   * 
   * Funcionalidades:
   * - Busca produto com detalhes da categoria
   * - Inclui informa√ß√µes completas do estoque
   * - Formata√ß√£o consistente dos dados
   * 
   * Usado por:
   * - Formul√°rios de edi√ß√£o
   * - P√°ginas de detalhes do produto
   * - Integra√ß√µes com outros sistemas
   */
  async show(req, res) {
    try {
      // Extrai ID da URL
      const { id } = req.params;
      
      // ===== BUSCA DO PRODUTO =====
      
      // Busca produto com detalhes da categoria
      const produto = await this.produtoModel.findByIdWithDetails(id);
      
      // Verifica se o produto foi encontrado
      if (!produto) {
        return this.notFoundError(res, 'Produto n√£o encontrado');
      }
      
      // Retorna dados do produto encontrado
      res.json(produto);
      
    } catch (error) {
      // Trata erros de busca
      this.handleError(res, error, 'Erro ao buscar produto');
    }
  }
}

// ============================================================================
// EXPORTA√á√ÉO
// ============================================================================

/**
 * Exporta a classe ProdutoController para uso nas rotas
 * 
 * Uso nas rotas:
 * const ProdutoController = require('../controllers/ProdutoController');
 * const produtoController = new ProdutoController();
 * 
 * router.get('/produtos', produtoController.index.bind(produtoController));
 * router.post('/produtos', produtoController.store.bind(produtoController));
 */
module.exports = ProdutoController;
