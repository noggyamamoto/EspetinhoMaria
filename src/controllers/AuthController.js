/**
 * ============================================================================
 * AUTH CONTROLLER - SISTEMA DE AUTENTICA√á√ÉO E AUTORIZA√á√ÉO
 * ============================================================================
 * 
 * Controller respons√°vel por todas as opera√ß√µes relacionadas √† autentica√ß√£o.
 * Gerencia login, logout e controle de acesso ao painel administrativo.
 * 
 * Funcionalidades:
 * - Sistema de login com credenciais fixas
 * - Logout com limpeza de sess√£o
 * - Middleware de verifica√ß√£o de autentica√ß√£o
 * - Redirecionamentos inteligentes baseados na URL de origem
 * - Compatibilidade com m√∫ltiplas URLs do painel admin
 * - Gerenciamento de cookies HTTP-only para seguran√ßa
 * 
 * Seguran√ßa:
 * - Cookies HTTP-only (n√£o acess√≠veis via JavaScript)
 * - Valida√ß√£o de credenciais no backend
 * - Controle de acesso por middleware
 * - Redirecionamentos seguros
 * 
 * Compatibilidade:
 * - URLs antigas: /painel-administrador/*
 * - URLs novas: /admin/*
 * 
 * @author Equipe Espetinho Maria
 * @version 2.0.0
 * @since 2025-07-24
 */

const BaseController = require('./BaseController');

/**
 * Classe AuthController - Gerenciamento de Autentica√ß√£o
 * 
 * Estende BaseController para herdar funcionalidades comuns como
 * valida√ß√µes e tratamento de erros padronizados.
 */
class AuthController extends BaseController {

  // ========================================================================
  // OPERA√á√ÉO: LOGIN DO USU√ÅRIO
  // ========================================================================

  /**
   * Processa tentativa de login do usu√°rio
   * 
   * @param {Object} req - Request do Express
   * @param {Object} res - Response do Express
   * 
   * Endpoint: POST /api/auth/login
   * 
   * Body esperado:
   * {
   *   "usuario": "admin",
   *   "senha": "1234"
   * }
   * 
   * Processo de login:
   * 1. Valida√ß√£o de campos obrigat√≥rios
   * 2. Verifica√ß√£o de credenciais (fixas para exemplo)
   * 3. Cria√ß√£o de cookie de autentica√ß√£o
   * 4. Redirecionamento inteligente baseado na origem
   * 
   * Credenciais v√°lidas (exemplo):
   * - Usu√°rio: admin
   * - Senha: 1234
   * 
   * Seguran√ßa:
   * - Cookie HTTP-only para prevenir acesso via JavaScript
   * - Redirecionamentos seguros
   * - Valida√ß√£o no backend
   * 
   * Compatibilidade:
   * - Detecta origem da requisi√ß√£o (URL antiga vs nova)
   * - Redireciona para URL correspondente
   */
  async login(req, res) {
    try {
      // Extrai credenciais do corpo da requisi√ß√£o
      const { usuario, senha } = req.body;
      
      // Log da tentativa de login (sem expor a senha)
      console.log('üîê Tentativa de login:', { usuario });
      
      // ===== VALIDA√á√ïES =====
      
      // Valida√ß√£o de campos obrigat√≥rios
      const errors = this.validateRequired(req.body, ['usuario', 'senha']);
      
      if (errors.length > 0) {
        return this.validationError(res, errors);
      }
      
      // ===== VERIFICA√á√ÉO DE CREDENCIAIS =====
      
      // Credenciais fixas para demonstra√ß√£o
      // Em produ√ß√£o, consultar banco de dados com hash da senha
      if (usuario === 'admin' && senha === '1234') {
        
        // ===== LOGIN V√ÅLIDO =====
        
        // Cria cookie de autentica√ß√£o seguro
        // httpOnly: true previne acesso via JavaScript (XSS protection)
        res.cookie('auth', 'true', { httpOnly: true });
        
        console.log('‚úÖ Login realizado com sucesso');
        
        // ===== REDIRECIONAMENTO INTELIGENTE =====
        
        // Detecta URL de origem para manter compatibilidade
        const referer = req.get('Referer') || '';
        
        if (referer.includes('painel-administrador')) {
          // URL antiga: redireciona para dashboard antigo
          return res.redirect('/painel-administrador/painel/dashboard.html');
        } else {
          // URL nova: redireciona para dashboard novo
          return res.redirect('/admin/painel/dashboard.html');
        }
      }
      
      // ===== LOGIN INV√ÅLIDO =====
      
      console.log('‚ùå Credenciais inv√°lidas');
      
      // Redireciona para login com par√¢metro de erro
      const referer = req.get('Referer') || '';
      
      if (referer.includes('painel-administrador')) {
        // URL antiga com erro
        return res.redirect('/painel-administrador/login.html?erro=1');
      } else {
        // URL nova com erro
        return res.redirect('/admin/login.html?erro=1');
      }
      
    } catch (error) {
      // ===== TRATAMENTO DE ERROS =====
      
      console.error('‚ùå Erro no login:', error);
      
      // Redireciona para login com erro de sistema
      const referer = req.get('Referer') || '';
      
      if (referer.includes('painel-administrador')) {
        return res.redirect('/painel-administrador/login.html?erro=sistema');
      } else {
        return res.redirect('/admin/login.html?erro=sistema');
      }
    }
  }

  // ========================================================================
  // OPERA√á√ÉO: LOGOUT DO USU√ÅRIO
  // ========================================================================

  /**
   * Processa logout do usu√°rio
   * 
   * @param {Object} req - Request do Express
   * @param {Object} res - Response do Express
   * 
   * Endpoint: POST /api/auth/logout
   * 
   * Processo de logout:
   * 1. Remove cookie de autentica√ß√£o
   * 2. Limpa sess√£o do usu√°rio
   * 3. Redireciona para p√°gina de login apropriada
   * 
   * Seguran√ßa:
   * - Limpeza completa da sess√£o
   * - Redirecionamento seguro
   * - Remo√ß√£o de cookies de autentica√ß√£o
   */
  async logout(req, res) {
    try {
      // ===== LIMPEZA DA SESS√ÉO =====
      
      // Remove cookie de autentica√ß√£o
      res.clearCookie('auth');
      
      console.log('‚úÖ Logout realizado com sucesso');
      
      // ===== REDIRECIONAMENTO INTELIGENTE =====
      
      // Detecta URL de origem para manter compatibilidade
      const referer = req.get('Referer') || '';
      
      if (referer.includes('painel-administrador')) {
        // Redireciona para login antigo
        res.redirect('/painel-administrador/login.html');
      } else {
        // Redireciona para login novo
        res.redirect('/admin/login.html');
      }
      
    } catch (error) {
      // Trata erros durante logout
      this.handleError(res, error, 'Erro ao fazer logout');
    }
  }

  // ========================================================================
  // MIDDLEWARE: VERIFICA√á√ÉO DE AUTENTICA√á√ÉO
  // ========================================================================

  /**
   * Middleware para verificar se o usu√°rio est√° autenticado
   * 
   * @param {Object} req - Request do Express
   * @param {Object} res - Response do Express
   * @param {Function} next - Fun√ß√£o next do Express
   * 
   * Funcionalidades:
   * - Verifica presen√ßa e validade do cookie de autentica√ß√£o
   * - Permite acesso se autenticado
   * - Redireciona para login se n√£o autenticado
   * - Mant√©m compatibilidade com URLs antigas e novas
   * 
   * Uso:
   * router.get('/admin/*', authController.isAuthenticated, ...)
   * 
   * Verifica√ß√£o:
   * - Cookie 'auth' deve existir
   * - Valor do cookie deve ser 'true'
   * - Cookie deve ser acess√≠vel via req.cookies
   * 
   * Redirecionamentos:
   * - URLs com 'painel-administrador' ‚Üí login antigo
   * - Outras URLs ‚Üí login novo
   */
  isAuthenticated(req, res, next) {
    // ===== VERIFICA√á√ÉO DE AUTENTICA√á√ÉO =====
    
    // Verifica se existe cookie de autentica√ß√£o v√°lido
    if (req.cookies && req.cookies.auth === 'true') {
      // Usu√°rio autenticado: permite acesso
      return next(); // Continua para o pr√≥ximo middleware/rota
    }
    
    // ===== USU√ÅRIO N√ÉO AUTENTICADO =====
    
    // Redireciona para login baseado na URL solicitada
    if (req.originalUrl.includes('painel-administrador')) {
      // URL antiga: redireciona para login antigo
      return res.redirect('/painel-administrador/login.html');
    } else {
      // URL nova: redireciona para login novo
      return res.redirect('/admin/login.html');
    }
  }
}

// ============================================================================
// EXPORTA√á√ÉO
// ============================================================================

/**
 * Exporta a classe AuthController para uso nas rotas
 * 
 * Uso nas rotas:
 * const AuthController = require('../controllers/AuthController');
 * const authController = new AuthController();
 * 
 * // Rotas de autentica√ß√£o
 * router.post('/login', authController.login.bind(authController));
 * router.post('/logout', authController.logout.bind(authController));
 * 
 * // Middleware de prote√ß√£o
 * router.use('/admin/*', authController.isAuthenticated.bind(authController));
 * 
 * Nota: √â importante fazer o bind para preservar o contexto 'this'
 */
module.exports = AuthController;
